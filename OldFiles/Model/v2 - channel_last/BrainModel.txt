def getModel(self):

	num_classes = 10
	optimizer = RMSprop(lr = 0.001, rho = 0.9, epsilon = 1e-08, decay = 0.0)

	model = Sequential()

	model.add(Conv2D(128, (3, 3), input_shape = (28, 28, 1), activation = 'relu', padding = 'same'))
	model.add(AveragePooling2D(pool_size = (2, 2), strides = 2))
	model.add(Dropout(0.2))

	model.add(BatchNormalization())

	model.add(Conv2D(256, (3, 3), input_shape = (28, 28, 1), activation = 'relu', padding = 'same'))
	model.add(AveragePooling2D(pool_size = (2, 2), strides = 2))
	model.add(Dropout(0.2))

	model.add(BatchNormalization())

	model.add(Conv2D(512, (3, 3), input_shape = (28, 28, 1), activation = 'relu', padding = 'same'))
	model.add(AveragePooling2D(pool_size = (2, 2), strides = 2))
	model.add(Dropout(0.3))

	model.add(BatchNormalization())            
	model.add(GlobalMaxPooling2D())
	    
	model.add(Dense(1024, activation = 'relu'))
	model.add(BatchNormalization())
	model.add(Dropout(0.5))
	model.add(Dense(num_classes, activation = 'softmax', name = 'predict'))

	model.compile(loss = 'categorical_crossentropy', optimizer = optimizer, metrics = ['accuracy', keras_metrics.precision(), keras_metrics.recall()])

	return model
